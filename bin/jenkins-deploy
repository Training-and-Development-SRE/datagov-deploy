#!/bin/bash

set -o errexit
set -o pipefail
shopt -s extglob  # For extended pattern matching +() in slugify

# Install virtualenv in the project directory ./.venv
PIPENV_VENV_IN_PROJECT=${PIPENV_VENV_IN_PROJECT:-1}

function usage () {
  cat <<EOF >&2
$0: <command> [arguments...]

Commands:

  build
    Build the datagov-deploy artifact (prepares Ansible playbooks).

  ping <environment>
    Runs ansible ping to test connectivity.

  deploy <environment> <playbook.yml> [arguments...]
    Runs ansible-playbook with the given arugments for deploy.


Required environment variables:

  ANSIBLE_VAULT_FILE
    Path to the Ansible Vault password file.

  SSH_KEY_FILE
    Path to the SSH key file for access to the environment.

EOF
}

function check_required_env_vars () {
  if [[ -z "$ANSIBLE_VAULT_FILE" ]]; then
    echo "ANSIBLE_VAULT_FILE environment variable must be set." >&2
    usage
    return 1
  fi

  if [[ -z "$SSH_KEY_FILE" ]]; then
    echo "SSH_KEY_FILE environment variable must be set." >&2
    usage
    return 1
  fi
}

function ping () {
  local environment
  environment="$1"
  check_required_env_vars
  pipenv run ansible --key-file=$SSH_KEY_FILE --vault-password-file=$ANSIBLE_VAULT_FILE --inventory "inventories/$environment" -m ping all
}

function deploy () {
  local environment playbook
  environment="$1"
  shift
  playbook="$1"
  shift

  check_required_env_vars
  pipenv run ansible-playbook --key-file=$SSH_KEY_FILE --vault-password-file=$ANSIBLE_VAULT_FILE --inventory "inventories/$environment" "$playbook" "$@"
}

function build () {
  pip install --user pipenv
  pipenv sync
  pipenv run make vendor
}


if [[ "$#" -eq 0 ]]; then
  echo "Please specify a command." >&2
  usage
  exit 1
fi

command=$1
shift
case "$command" in
  build)
    build
    ;;
  deploy)
    deploy "$@"
    ;;
  ping)
    ping "$@"
    ;;
  *)
    echo "Unknown command." >&2
    usage
    exit 1
    ;;
esac
